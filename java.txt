Q.1 a) Create a simple calculator application using servlet.
CODE:

index.html
<html>
<body>
 <form method="post" action="CalcServlet"> NO-1 <input type="text" name="t1">NO-2 <input type="text" 
name="t2"><br><br>
 <input type="submit" value="+" name="btn">
 <input type="submit" value="-" name="btn">
 <input type="submit" value="*" name="btn">
 <input type="submit" value="/" name="btn">
 </form>
</body>
</html>

CalcServlet.java

import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;
public class CalcServlet extends HttpServlet {
public void doPost(HttpServletRequest request,
HttpServletResponse response) throws ServletException, IOException {
response.setContentType("text/html");
PrintWriter out = response.getWriter();
int a = Integer.parseInt(request.getParameter("t1"));
int b = Integer.parseInt(request.getParameter("t2"));
String op = request.getParameter("btn");
int c = (op.equals("+")) ? a + b : (op.equals("-")) ? a - b
: (op.equals("*")) ? a * b : (op.equals("/")) ? a / b :
0;
out.println("<b>" + a + op + b + " = " + c + "<b>");
}
}


1b Aim: Create a servlet for a login page. If the username and password are correct then it says message “Hello < username>” else a message “login failed”.

Source Code:

index.html

<html>
<body>
<form action="LoginServlet" method="post"> UserName : <input
type="text" name="uname">
<br> Password : <input type="password" name="pw">
<br>
<input type="submit" value="LOGIN">
</form>
</body>
</html>

LoginServlet.java

import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;
public class LoginServlet extends HttpServlet {
public void doPost(HttpServletRequest request,
HttpServletResponse response) throws ServletException, IOException {
response.setContentType("text/html");
PrintWriter out = response.getWriter();
String username = request.getParameter("uname");
String password = request.getParameter("pw");
String msg = (username.equals("admin") &&
password.equals("admin123")) ? "Hello " + username :
"Login failed";
out.println("<b>" + msg + "<b>");
}
}

1c Aim: Create a registration servlet in Java using JDBC. Accept the details such as Username, Password, Email, and Country from the user using HTML Form and store
the registration details in the database.

Source Code:

index.html
<html>
<body>
<form action="RegistrationServlet" method="post"> User name
: <input type="text" name="uname">
<br> Password : <input type="password" name="pw">
<br> Email Id : <input type="text" name="email">
<br> Country : <select name="coun">
<option>select...
<option>India
<option>Bangladesh
<option>Bhutan
<option>Canada
</select>
<br>
<input type="submit" value="Register">
</form>
</body>
</html>

RegistrationServlet.java

import java.io.*;
import java.sql.*;
import javax.servlet.*;
import javax.servlet.http.*;
public class RegistrationServlet extends HttpServlet {
public void doPost(HttpServletRequest request,
HttpServletResponse response) throws IOException, ServletException {
Connection con = null;
PreparedStatement ps = null;
response.setContentType("text/html");
PrintWriter out = response.getWriter();
String username = request.getParameter("uname");
String password = request.getParameter("pw");
String emailid = request.getParameter("email");
String country = request.getParameter("coun");
try {
Class.forName("com.mysql.jdbc.Driver");
con =
DriverManager.getConnection("jdbc:mysql://localhost:3306/registerdb"
, "root", "tiger");
out.println("Connection done successfully...");
ps = con.prepareStatement("insert into user values
(?,?,?,?)");
ps.setString(1, username);
ps.setString(2, password);
ps.setString(3, emailid);
ps.setString(4, country);
ps.execute();
out.print("Data inserted successfully!!!!");
} catch (Exception e) {
out.println(e);
}
out.println("<b><b>");
}
}


2a Aim: Using Request Dispatcher Interface create a Servlet which will validate the
password entered by the user, if the user has entered "Servlet" as password, then he
will be forwarded to Welcome Servlet else the user will stay on the index.html page
and an error message will be displayed.
Source Code:
Index.html
<html>
<body>
<form method="post" action="ValidateServlet"> User Name:
<input type="text" name="un">
<br> Password: <input type="password" name="pw">
<br>
<input type="submit" value="Login">
</form>
</body>
</html>
ValidateServlet.java
import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;
public class ValidateServlet extends HttpServlet {
public void doPost(HttpServletRequest req, HttpServletResponse
res) throws IOException, ServletException {
res.setContentType("text/html");
PrintWriter out = res.getWriter();
String username = req.getParameter("un");
String password = req.getParameter("pw");
if (password.equals("Servlet")) {
req.setAttribute("s1username", username);
req.setAttribute("s1password", password);
RequestDispatcher rd =
req.getRequestDispatcher("/WelcomeServlet");
rd.forward(req, res);
} else {
out.print("Incorrect password");
RequestDispatcher rd =
req.getRequestDispatcher("/index.html");
rd.include(req, res);
}
}
}
WelcomeServlet.java
import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;
public class WelcomeServlet extends HttpServlet {
public void doPost(HttpServletRequest req, HttpServletResponse
res) throws ServletException, IOException {
res.setContentType("text/html");
try (PrintWriter out = res.getWriter()) {
String s2username = (String)
req.getAttribute("s1username");
String s2password = (String)
req.getAttribute("s2password");
out.println("Welcome " + s2username);
}
}
}



2b Aim: Create a servlet that uses Cookies to store the number of times a user has
visited servlet.
Source Code:
CookieServlet.java
import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;
public class WelcomeServlet extends HttpServlet {
public void doPost(HttpServletRequest req, HttpServletResponse
res) throws ServletException, IOException {
res.setContentType("text/html");
try (PrintWriter out = res.getWriter()) {
String s2username = (String)
req.getAttribute("s1username");
String s2password = (String)
req.getAttribute("s2password");
out.println("Welcome " + s2username);
}
}
}


2c Aim: Create a servlet demonstrating the use of session creation and destruction.
Also check whether the user has visited this page first time or has visited earlier also
using sessions.
Source Code:
CalculationVisitServlet.java
import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;
public class HttpSessionServlet extends HttpServlet {
private int counter;
public void doGet(HttpServletRequest request,
HttpServletResponse response) throws ServletException, IOException {
response.setContentType("text/html");
PrintWriter out = response.getWriter();
HttpSession session = request.getSession(true);
if (session.isNew()) {
out.print("This is the first time you are visiting this
page");
++counter;
} else {
synchronized(HttpSessionServlet.this) {
if (counter == 10) {
session.invalidate();
counter = 0;
request.getSession(false);
} else {
out.print("You have visited this page " +
(++counter) + " times");
}
}
}
}
}


4b Aim: Develop a simple JSP application to pass values from one page to another
with validations. (Name-txt, age-txt, hobbies-checkbox, email-txt, gender-radio button).
Source Code:
Index.html
<html>
<body>
<form action="Validate.jsp"> Enter Your Name <input
type="text" name="name">
<br> Enter Your Age <input type="text" name="age">
<br> Select Hobbies <input type="checkbox" name="hob"
value="Singing">Singing <input type="checkbox" name="hob"
value="Reading">Reading Books <input type="checkbox" name="hob"
value="Football">Playing Football <br> Enter E-mail <input
type="text" name="email">
<br> Select Gender <input type="radio" name="gender"
value="male">Male <input type="radio" name="gender"
value="female">Female <input type="radio" name="gender"
value="other">Other <br>
<input type="hidden" name="error" value="">
<input type="submit" value="Submit Form">
</form>
</body>
</html>
CheckerBean.java
package mypack;
import java.beans.*;
import java.io.Serializable;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
public class CheckerBean implements Serializable {
private String name, hob, email, gender, error;
private int age;
public CheckerBean() {
name = "";
hob = "";
email = "";
gender = "";
error = "";
age = 0;
}
public void setName(String n) { name = n; }
public String getName() { return name; }
public void setAge(int a) { age = a; }
public int getAge() { return age; }
public void setHob(String h) { hob = h; }
public String getHob() { return hob; }
public void setEmail(String e) { email = e; }
public String getEmail() { return email; }
public void setGender(String g) { gender = g; }
public String getGender() { return gender; }
public String getError() { return error; }
public boolean validate() {
boolean res = true;
if (name.trim().equals("")) {
error += "<br>Enter First Name";
res = false;
}
if (age < 0 || age > 99) {
error += "<br>Age Invalid";
res = false;
}
String emailregex =
"^[_A-Za-z0-9-]+(\\.[_A-Za-z0-9-]+)*@[A-Za-z0-9-]+(\\.[A-Za-z0-9-]+)
*(\\.[AZa-z]{2,})$";
Boolean b = email.matches(emailregex);
if (!b) {
error += "<br>Email Invalid";
res = false;
}
return res;
}
}
Validate.jsp
<%@page contentType="text/html" pageEncoding="UTF-8"
import="mypack.*"%> <html>
<head>
<title>JSP Page</title>
</head>
<body>
<h1>Validation Page</h1>
<jsp:useBean id="obj" scope="request"
class="mypack.CheckerBean">
<jsp:setProperty name="obj" property="*" />
</jsp:useBean><% if(obj.validate()) { %>
<jsp:forward page="successful.jsp" /><% } else { %>
<jsp:include page="index.html" /><% } %><%= obj.getError()
%>
</body>
</html>
successful.jsp
<%@page contentType="text/html" pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html;
charset=UTF-8">
<title>JSP Page</title>
</head>
<body>
<h1>DATA VALIDATED SUCCESSFULLY</h1>
</body>
</html>


4c Aim: Create a registration and login JSP application to register and authenticate the
user based on username and password using JDBC.
Source Code:
Index.html
<html>
<head>
<title>New User Registration Page</title>
</head>
<body>
<form action="Registration.jsp">
<h1>New User Registration Page</h1> Enter User Name
<input type="text" name="txtName">
<br> Enter Password <input type="password"
name="txtPass1">
<br> Re-Enter Password <input type="password"
name="txtPass2">
<br> Enter Email <input type="text" name="txtEmail">
<br> Enter Country Name <select name="txtCon">
<option>India</option>
<option>France</option>
<option>England</option>
<option>Argentina</option>
</select>
<br>
<input type="submit" value="REGISTER">
<input type="reset">
</form>
</body>
</html>
Registration.jsp
<%@page contentType="text/html" import="java.sql.*"%> <html>
<body>
<h1>Registration JSP Page</h1><%
String uname=request.getParameter("txtName");
String pass1=request.getParameter("txtPass1");
String pass2=request.getParameter("txtPass2");
String email=request.getParameter("txtEmail"); String
ctry=request.getParameter("txtCon");
if(pass1.equals(pass2)) {
try {
Class.forName("com.mysql.jdbc.Driver");
Connection con =
DriverManager.getConnection("jdbc:mysql://localhost:3306/l
ogindb",”root”,”tiger”); PreparedStatement
stmt=con.prepareStatement("insert into userpass
values(?,?,?,?)"); stmt.setString(1,uname);
stmt.setString(2,pass1); stmt.setString(3,email);
stmt.setString(4,ctry); int row=stmt.executeUpdate();
if(row==1) {
out.println("Registration Successful");} else {
out.println("Registration FAILED!!!!");
%> <jsp:include page="index.html"></jsp:include><%
}
}catch(Exception e){out.println(e);}
} else {
out.println("
<h1>Password Mismatch</h1>");
%> <jsp:include page="index.html"></jsp:include><% }
%>
</body>
</html>
Login.html
<html>
<body>
<h1>Login Page</h1>
<form action="Login.jsp"> Enter User Name <input type="text"
name="txtName">
<br> Enter Password <input type="password"
name="txtPass">
<br>
<input type="submit" value="~~~LOGIN~~">
<input type="reset">
</form>
</body>
</html>
Login.jsp
<%@page contentType="text/html" import="java.sql.*"%> <html>
<body>
<h1>Registration JSP Page</h1>
< %
String uname = request.getParameter("txtName");
String pass = request.getParameter("txtPass");
ResultSet rs = null;
try {
Class.forName("com.mysql.jdbc.Driver");
Connection
con =
DriverManager.getConnection("jdbc:mysql://localhost:3306/l
ogindb"
",”root”,”tiger”); Statement
stmt=con.createStatement(); rs=stmt.executeQuery("
select password from userpass where username =
'"+uname+"' "); rs.next(); if(pass.equals(rs.getString(1))) {
out.println(" < h1 > ~~~LOGIN SUCCESSFULLL~~~ <
/h1>");
} else { out.println(" <h1> password does not
match!!!!! < /h1>");%>
<jsp:include page = "index.html" >
<jsp:include><%}
} catch (Exception e) {
out.println(" <h1> User does not exist!!!!!</h1>");%>
<jsp: include page = "index.html" > < /jsp:include><% }%>
</body>
</html>


5a Aim: Create an html page with fields, eno, name, age, desg, salary. Now on submit
this data to a JSP page which will update the employee table of database with
matching eno.
Source Code:
Index.html
<html>
<body>
<form action="UpdateEmp.jsp"> Enter Employee Number <input
type="text" name="txtEno">
<br> Enter Salary to update <input type="text"
name="txtSal">
<br>
<input type="reset">
<input type="submit">
</form>
</body>
</html>
UpdateEmp.jsp
<%@page contentType="text/html" import="java.sql.*" %> <html>
<body>
<h1>Updating Employee Record</h1><%
String eno=request.getParameter("txtEno"); String sal =
request.getParameter("txtSal");
try{
Class.forName("com.mysql.jdbc.Driver");
Connection con =
DriverManager.getConnection("jdbc:mysql://localhost:3
306/empdb","root","tiger"); PreparedStatement stmt =
con.prepareStatement("select * from emp where
empno=?"); stmt.setString(1, eno);
ResultSet rs = stmt.executeQuery(); if(rs.next()){
out.println(" <h1> Employee "+rs.getString(2)+" Exist
</h1>");
PreparedStatement pst= con.prepareStatement("update
emp set salary=? where empno=?");
pst.setString(1, sal); pst.setString(2, eno);
pst.executeUpdate(); out.println(" <h1>Employee
Record updated !!!!!</h1>"); }
else{
out.println(" <h1>Employee Record not exist
!!!!!</h1>"); }
}catch(Exception e){out.println(e);}
%>
</body>
</html>


5c Aim: Create a JSP application to demonstrate the use of JSTL.
Source Code:
index.html
<html>
<body>
<a href="setDemo.jsp">SetDemo</a>
<a href="Maxif.html">MaxIF</a>
<a href="forEachDemo.jsp">ForEachDemo</a>
<a href="outDemo.jsp">OutDemo</a>
<a href="URLDemo.jsp">URLDemo</a>
<a href="choose_when_otherwise.jsp"> choose_when_otherwise
</a>
</body>
</html>
setDemo.jsp
< % @taglib prefix = "c" uri = "http://java.sun.com/jstl/core" % >
<c: set var = "pageTitle" scope = "application" value = "Dukes
Soccer League: Registration" / > $ { pageTitle}
Maxif.html
<form action="IFDemo.jsp"> x= <input type="text" name="x" />
<br> y= <input type="text" name="y" />
<br>
<input type="submit" value="Check Max" />
</form>
IFDemo.jsp
<% @taglib prefix = "c" uri = "http://java.sun.com/jsp/jstl/core" % >
<c: set var = "x" value = "${param.x}" />
<c: set var = "y" value = "${param.y}" />
<c: if test = "${x>y}" >
<font color = "blue" >
<h2> The Ans is: </h2></font >
<c: out value = "${x} is greater than ${y}" />
</c:if>
ForeachDemo.jsp
<%@taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<c:forEach begin="1" end="10" var="i"> The Square of ${i} = ${i * i}
<br>
</c:forEach>
outDemo.jsp
<%@taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<c:set var="name" value="John"/>
My name is: <c:out value= "${name}" />
URLDemo.jsp
<%@taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<c:url value="/index.html"/>
choose_when_otherwise.jsp
<%@taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<c:set var="income" value="${4000*4}"/> Your Income is: <c:out
value="${income}"/> <c:choose>
<c:when test="${income <=1000}">
Income is not good
</c:when>
<c:when test="${income > 10000}"> Income is Very Good
</c:when>
<c:otherwise> Income is undetermined </c:otherwise>
</c:choose>




6a AIm: Create a Currency Converter application using EJB.
Source Code:
Index.html
<html>
<head>
<title>Currency Converter</title>
</head>
<body>
<form action="CCServlet"> Enter Amount <input type="text"
name="amt">
<br> Select Conversion Type <input type="radio"
name="type" value="r2d" checked>Rupees to Dollar <input type="radio"
name="type" value="d2r">Dollar to Rupees <br>
<input type="reset">
<input type="submit" value="CONVERT">
</form>
</body>
</html>
CCBeanLocal.java
package mybeans;
import javax.ejb.Stateless;
@Stateless public interface CCBeanLocal {
//default constructor
public double r2Dollar(double r);
public double d2Rupees(double d);
}
CCBean.java
package mybeans;
import javax.ejb.Stateless;
@Stateless public class CCBean implements CCBean1Local {
public double r2Dollar(double r) {
return r / 65.65;
}
public double d2Rupees(double d) {
return d * 65.65;
}
}
CCServlet in the package mypack.
package mypack;
import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;
import javax.ejb.EJB;
import mybeans.CCBeanLocal;
public class CCServlet extends HttpServlet {
@EJB CCBeanLocal obj;
public void doGet(HttpServletRequest request,
HttpServletResponse response) throws
ServletException, IOException {
response.setContentType("text/html;charset=UTF-8");
PrintWriter out = response.getWriter();
double amt =
Double.parseDouble(request.getParameter("amt"));
if (request.getParameter("type").equals("r2d")) {
out.println("<h1>" + amt + " Rupees = " +
obj.r2Dollar(amt) + " Dollars</h1>");
}
if (request.getParameter("type").equals("d2r")) {
out.println("<h1>" + amt + " Dollars = " +
obj.d2Rupees(amt) + " Rupees</h1>");
}
}
}


8a Aim: Develop a simple inventory application using JPA.
Source Code:
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import javax.xml.bind.annotation.XmlRootElement;
@Entity @Table(name = "product") @XmlRootElement @NamedQueries({
@NamedQuery(name = "Product.findAll", query = "SELECT p FROM
Product p"),
@NamedQuery(name = "Product.findByPid", query = "SELECT p FROM
Product p WHERE p.pid = :pid"),
@NamedQuery(name = "Product.findByPname", query = "SELECT p FROM
Product p WHERE p.pname = :pname"),
@NamedQuery(name = "Product.findByPrice", query = "SELECT p FROM
Product p WHERE p.price = :price"),
@NamedQuery(name = "Product.findByQty", query = "SELECT p FROM
Product p WHERE p.qty = :qty")
})
public class Product implements Serializable {
private static final long serialVersionUID = 1 L;
@Id @GeneratedValue(strategy = GenerationType.IDENTITY)
@Basic(optional = false)
@Column(name = "pid") private Integer pid;
@Basic(optional = false) @NotNull @Size(min = 1, max = 50)
@Column(name = "pname") private String pname;
@Basic(optional = false) @NotNull @Column(name = "price") private
int price;
@Basic(optional = false) @NotNull @Column(name = "qty") private
int qty;
public Product() {}
public Product(Integer pid) {
this.pid = pid;
}
public Product(Integer pid, String pname, int price, int qty) {
this.pid = pid;
this.pname = pname;
this.price = price;
this.qty = qty;
}
public Integer getPid() {
return pid;
}
public void setPid(Integer pid) {
this.pid = pid;
}
public String getPname() {
return pname;
}
public void setPname(String pname) {
this.pname = pname;
}
public int getPrice() {
return price;
}
public void setPrice(int price) {
this.price = price;
}
public int getQty() {
return qty;
}
public void setQty(int qty) {
this.qty = qty;
}
@Override
public int hashCode() {
int hash = 0;
hash += (pid != null ? pid.hashCode() : 0);
return hash;
}
@Override
public boolean equals(Object object) {
if (!(object instanceof Product)) {
return false;
}
Product other = (Product) object;
if ((this.pid == null && other.pid != null) || (this.pid != null
&& !this.pid.equals(other.pid))) {
return false;
}
return true;
}
@Override
public String toString() {
return "com.mypack.Product[ pid=" + pid + " ]";
}
}
index.html
<html>
<head></head>
<body>
<div>TODO write content</div>
</body>
</html>
Insertjsp.jsp
<%@page import="java.util.Iterator"%><%@page
import="java.util.List"%><%@page
import="com.mypack.Product"%><%@page
import="javax.persistence.Persistence"%><%@page
import="javax.persistence.EntityTransaction"%><%@page
import="javax.persistence.EntityManager"%><%@page
import="javax.persistence.EntityManagerFactory"%><%@page
contentType="text/html" pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html;
charset=UTF-8">
<title>JSP Page</title>
</head>
<body>
< % !private EntityManagerFactory emf;
private EntityManager em;
private EntityTransaction tx;
private List
<
Product > products; % > < % emf =
Persistence.createEntityManagerFactory("JPA_InventryPU");
em = emf.createEntityManager();
Product prd = new Product();
prd.setPname("XYZ");
prd.setPrice(300);
prd.setQty(200);
tx = em.getTransaction();
tx.begin();
em.persist(prd);
tx.commit();
em.close();
emf = Persistence.createEntityManagerFactory("JPA_InventryPU");
em = emf.createEntityManager();
Product prdtbl = em.find(Product.class, 1);
prdtbl.setPname("XYZ-2");
prdtbl.setPrice(5000);
prdtbl.setQty(5000);
tx = em.getTransaction();
tx.begin();
em.merge(prdtbl);
tx.commit();
em.close();
emf = Persistence.createEntityManagerFactory("JPA_InventryPU");
em = emf.createEntityManager();
Product prdtbl = em.find(Product.class, 1);
tx = em.getTransaction();
tx.begin();
em.remove(prdtbl);
tx.commit();
em.close();
emf = Persistence.createEntityManagerFactory("JPA_InventryPU");
em = emf.createEntityManager();
products = em.createQuery("select x from Product
x").getResultList();
Iterator it = products.iterator();
while (it.hasNext()) {
Product pd = (Product) it.next();
out.print(pd.getPid() + " " + pd.getPname() + " " + pd.getPrice()
+ " " + pd.getQty() + " <
br > ");
} % >
</body>
</html>
Inventory.jsp
<%@page import="java.util.Iterator"%><%@page
import="javax.persistence.Persistence"%><%@page
import="com.mypack.Product"%><%@page
import="java.util.List"%><%@page
import="javax.persistence.EntityTransaction"%><%@page
import="javax.persistence.EntityManager"%><%@page
import="javax.persistence.EntityManagerFactory"%><%@page
contentType="text/html" pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<title>JSP Page</title>
</head>
<body>
<form>PRODUCT NAME : <input type="text" name="pname">
<br>PRICE: <input type="text" name="pprice">
<br> QUANTITY: <input type="text" name="pqty">
<br>
<input type="submit" value="insert" name="insert">
<br>
</form>
<hr>
<form>PRODUCT ID : <input type="text" name="pid">
<br>PRODUCT NAME : <input type="text" name="pname">PRICE:
<input type="text" name="pprice">
<br>QUANTITY: <input type="text" name="pqty">
<br>
<input type="submit" value="update" name="update">
<br>
</form>
<hr>
<form>PRODUCT ID : <input type="text" name="pid">
<br>
<input type="submit" value="delete" name="delete">
</form>
<hr>
<form>
<input type="submit" value="select" name="select">
<br>
</form>
<hr>
< % !private EntityManagerFactory emf;
private EntityManager em;
private EntityTransaction tx;
private List
< Product > products; % > < %
if (request.getParameter("insert") != null) {
emf =
Persistence.createEntityManagerFactory("JPA_InventryPU");
em = emf.createEntityManager();
Product prd = new Product();
String pname = request.getParameter("pname");
int price = Integer.parseInt(request.getParameter("pprice"));
int pqty = Integer.parseInt(request.getParameter("pqty"));
prd.setPname(pname);
prd.setPrice(pprice);
prd.setQty(pqty);
tx = em.getTransaction();
tx.begin();
em.persist(prd);
tx.commit();
em.close();
o
ut.print("data inserted successfully");
}
if (request.getParameter("update") != null) {
emf =
Persistence.createEntityManagerFactory("JPA_InventryPU");
em = emf.createEntityManager();
int pid = Integer.parseInt(request.getParameter("pid"));
String pname = request.getParameter("pname");
int pprice =
Integer.parseInt(request.getParameter("pprice"));
int pqty = Integer.parseInt(request.getParameter("pqty"));
Product prdtbl = em.find(Product.class, pid);
prdtbl.setPname(pname);
prdtbl.setPrice(pprice);
prdtbl.setQty(pqty);
tx = em.getTransaction();
tx.begin();
em.merge(prdtbl);
tx.commit();
em.close();\
out.print("data updated successfully");
}
if (request.getParameter("delete") != null) {
emf =
Persistence.createEntityManagerFactory("JPA_InventryPU");
em = emf.createEntityManager();
int pid = Integer.parseInt(request.getParameter("pid"));
Product prdtbl = em.find(Product.class, pid);
tx = em.getTransaction();
tx.begin();
em.remove(prdtbl);
tx.commit();
em.close();
out.print("data deleted successfully");
}
if (request.getParameter("select") != null) {
emf =
Persistence.createEntityManagerFactory("JPA_InventryPU");
em = emf.createEntityManager();
products = em.createQuery("select x from Product
x").getResultList();
Iterator it = products.iterator();
while (it.hasNext()) {
Product pd = (Product) it.next();
out.print(pd.getPid() + " " + pd.getPname() + " " +
pd.getPrice() + " " + pd.getQty() + " <
br > ");
}
} % >
</body>
</html>


9a Aim: Develop a JPA Application to demonstrate use of ORM associations.
Source Code:
index.html
<html>
<head>
<title>TODO supply a title</title>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width,
initial-scale=1.0">
</head>
<body> User Details
<hr>
<br>
<br>
<form action="userview.jsp"> Name <input type="text"
name="uname" maxlength="20">
<br> User Type <input type="text" name="utype"
maxlength="20">
<br>
<input type="submit" value="submit">
</form>
</body>
</html>
userview.jsp
<%@page import="java.util.List"%><%@page
import="java.util.Iterator"%><%@page import="hibernate.User"%><%!
SessionFactory sf; org.hibernate.Session ss; List
<hibernate.User> User;
%><% sf = new Configuration().configure().buildSessionFactory(); ss=
sf.openSession();
Transaction tx=null; User ur=new User(); try
tx=ss.beginTransaction();
String uname=request.getParameter("uname"); String
utype=request.getParameter("utype"); ur.setUname(uname);
ur.setUtype(utype); ss.save(ur);
tx.commit();
}
catch(Exception e){ out.println("Error"+e.getMessage());
}
try
{
ss.beginTransaction();
User=ss.createQuery("from User").list();
}
catch(Exception e){ }
%> <html>
<head>
<title>Guest View</title>
</head>
<body> Guest View Click here to go <a href="index.html"> BACK
</a>
<br>
<br><% Iterator it=User.iterator();
while(it.hasNext())
User eachrecord=(User)it.next(); out.print(eachrecord.getUid()+" ");
out.print(eachrecord.getUname()+"
<br>");
out.print(eachrecord.getUtype()+"<br><hr>"); } %>
</body>
</html>
hibernate.revenge.xml
<hibernate-reverse-engineering>
<schema-selection match-catalog="userdb"/>
<table-filter match-name="user"/>
</hibernate-reverse-engineering>
hibernate.cfg.xml
<hibernate-configuration>
<session-factory>
<property
name="hibernate.dialect">org.hibernate.dialect.MySQLDialect</propert
y>
<property
name="hibernate.dialect">org.hibernate.dialect.MySQLDialect</propert
y>
<property
name="hibernate.connection.url">jdbc:mysql://localhost:3306/userdb?z
eroDateTimeBehavior=conve rtToNull</property>
<property
name="hibernate.connection.username">root</property>
<property
name="hibernate.connection.password">tiger</property>
</session-factory>
</hibernate-configuration>
User.hbm.xml
<hibernate-mapping>
<class optimistic-lock="version" catalog="userdb" table="user"
name="hibernate.User">
<id name="uid" type="java.lang.Integer">
<column name="uid"/>
<generator class="identity"/>
</id>
<property name="uname" type="string">
<column name="uname" length="20"/>
</property>
<property name="utype" type="string">
<column name="utype" length="100"/>
</property>
</class>
</hibernate-mapping>
User.java
package hibernate;
public class User implements java.io.Serializable {
private Integer uid;
private String uname;
private String utype;
public User() {}
public User(String uname, String utype) {
this.uname = uname;
this.utype = utype;
}
public Integer getUid() {
return this.uid;
}
public void setUid(Integer uid) {
this.uid = uid;
}
public String getUname() {
return this.uname;
}
public void setUname(String uname) {
this.uname = uname;
}
public String getUtype() {
return this.utype;
}
public void setUtype(String utype) {
this.utype = utype;
}
}



